//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClientDrawingArxiveWpf.DrawingArxiveService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DrawingItem", Namespace="http://schemas.datacontract.org/2004/07/DrawingArxiveService")]
    [System.SerializableAttribute()]
    public partial class DrawingItem : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DrawingArxiveService.IDrawingArxiveService1")]
    public interface IDrawingArxiveService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDrawingArxiveService1/GetWrongDrawingList", ReplyAction="http://tempuri.org/IDrawingArxiveService1/GetWrongDrawingListResponse")]
        System.Collections.Generic.LinkedList<ClientDrawingArxiveWpf.DrawingArxiveService.DrawingItem> GetWrongDrawingList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDrawingArxiveService1/GetWrongDrawingList", ReplyAction="http://tempuri.org/IDrawingArxiveService1/GetWrongDrawingListResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.LinkedList<ClientDrawingArxiveWpf.DrawingArxiveService.DrawingItem>> GetWrongDrawingListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDrawingArxiveService1/SetRepeatArxivation", ReplyAction="http://tempuri.org/IDrawingArxiveService1/SetRepeatArxivationResponse")]
        bool SetRepeatArxivation(ClientDrawingArxiveWpf.DrawingArxiveService.DrawingItem item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDrawingArxiveService1/SetRepeatArxivation", ReplyAction="http://tempuri.org/IDrawingArxiveService1/SetRepeatArxivationResponse")]
        System.Threading.Tasks.Task<bool> SetRepeatArxivationAsync(ClientDrawingArxiveWpf.DrawingArxiveService.DrawingItem item);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDrawingArxiveService1Channel : ClientDrawingArxiveWpf.DrawingArxiveService.IDrawingArxiveService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DrawingArxiveService1Client : System.ServiceModel.ClientBase<ClientDrawingArxiveWpf.DrawingArxiveService.IDrawingArxiveService1>, ClientDrawingArxiveWpf.DrawingArxiveService.IDrawingArxiveService1 {
        
        public DrawingArxiveService1Client() {
        }
        
        public DrawingArxiveService1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DrawingArxiveService1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DrawingArxiveService1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DrawingArxiveService1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Collections.Generic.LinkedList<ClientDrawingArxiveWpf.DrawingArxiveService.DrawingItem> GetWrongDrawingList() {
            return base.Channel.GetWrongDrawingList();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.LinkedList<ClientDrawingArxiveWpf.DrawingArxiveService.DrawingItem>> GetWrongDrawingListAsync() {
            return base.Channel.GetWrongDrawingListAsync();
        }
        
        public bool SetRepeatArxivation(ClientDrawingArxiveWpf.DrawingArxiveService.DrawingItem item) {
            return base.Channel.SetRepeatArxivation(item);
        }
        
        public System.Threading.Tasks.Task<bool> SetRepeatArxivationAsync(ClientDrawingArxiveWpf.DrawingArxiveService.DrawingItem item) {
            return base.Channel.SetRepeatArxivationAsync(item);
        }
    }
}
